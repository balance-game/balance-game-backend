/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BalanceGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COST"
      | "acceptOwnership"
      | "checkWinner"
      | "claimPool"
      | "createGame"
      | "gameIndex"
      | "getGameInfo"
      | "getGameWinner"
      | "isContinue"
      | "owner"
      | "rawFulfillRandomWords"
      | "requestIdToGameId"
      | "s_vrfCoordinator"
      | "setCoordinator"
      | "transferOwnership"
      | "vote"
      | "whiteList"
      | "whitelistUpdate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimPool"
      | "CoordinatorSet"
      | "NewGame"
      | "NewVote"
      | "NewWinner"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RandomnessRequested"
      | "WhiteListUpdate"
  ): EventFragment;

  encodeFunctionData(functionFragment: "COST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isContinue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToGameId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCoordinator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistUpdate",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "COST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContinue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistUpdate",
    data: BytesLike
  ): Result;
}

export namespace ClaimPoolEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    claimAddress: AddressLike,
    amount: BigNumberish,
    winnerRank: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    claimAddress: string,
    amount: bigint,
    winnerRank: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    claimAddress: string;
    amount: bigint;
    winnerRank: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoordinatorSetEvent {
  export type InputTuple = [vrfCoordinator: AddressLike];
  export type OutputTuple = [vrfCoordinator: string];
  export interface OutputObject {
    vrfCoordinator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGameEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    questionA: string,
    questionB: string,
    createdAt: BigNumberish,
    deadline: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    gameId: bigint,
    questionA: string,
    questionB: string,
    createdAt: bigint,
    deadline: bigint,
    creator: string
  ];
  export interface OutputObject {
    gameId: bigint;
    questionA: string;
    questionB: string;
    createdAt: bigint;
    deadline: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewVoteEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    votedAddress: AddressLike,
    voteOption: BigNumberish,
    votedAt: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    votedAddress: string,
    voteOption: bigint,
    votedAt: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    votedAddress: string;
    voteOption: bigint;
    votedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewWinnerEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winners: [AddressLike, AddressLike, AddressLike]
  ];
  export type OutputTuple = [gameId: bigint, winners: [string, string, string]];
  export interface OutputObject {
    gameId: bigint;
    winners: [string, string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [requestId: BigNumberish, gameId: BigNumberish];
  export type OutputTuple = [requestId: bigint, gameId: bigint];
  export interface OutputObject {
    requestId: bigint;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhiteListUpdateEvent {
  export type InputTuple = [userAddress: AddressLike, status: boolean];
  export type OutputTuple = [userAddress: string, status: boolean];
  export interface OutputObject {
    userAddress: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BalanceGame extends BaseContract {
  connect(runner?: ContractRunner | null): BalanceGame;
  waitForDeployment(): Promise<this>;

  interface: BalanceGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COST: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  checkWinner: TypedContractMethod<
    [_gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimPool: TypedContractMethod<[_gameId: BigNumberish], [void], "payable">;

  createGame: TypedContractMethod<
    [_questionA: string, _questionB: string, _deadline: BigNumberish],
    [void],
    "payable"
  >;

  gameIndex: TypedContractMethod<[], [bigint], "view">;

  getGameInfo: TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        id: bigint;
        questionA: string;
        questionB: string;
        voteCountA: bigint;
        voteCountB: bigint;
        totalpool: bigint;
        createAt: bigint;
        deadline: bigint;
        creator: string;
        creatorClaimed: boolean;
      }
    ],
    "view"
  >;

  getGameWinner: TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [[string, string, string], [boolean, boolean, boolean]] & {
        winners: [string, string, string];
        winnersClaimed: [boolean, boolean, boolean];
      }
    ],
    "view"
  >;

  isContinue: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestIdToGameId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  s_vrfCoordinator: TypedContractMethod<[], [string], "view">;

  setCoordinator: TypedContractMethod<
    [_vrfCoordinator: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_gameId: BigNumberish, _voteOption: BigNumberish],
    [void],
    "payable"
  >;

  whiteList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  whitelistUpdate: TypedContractMethod<
    [_newAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkWinner"
  ): TypedContractMethod<[_gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPool"
  ): TypedContractMethod<[_gameId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [_questionA: string, _questionB: string, _deadline: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "gameIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        id: bigint;
        questionA: string;
        questionB: string;
        voteCountA: bigint;
        voteCountB: bigint;
        totalpool: bigint;
        createAt: bigint;
        deadline: bigint;
        creator: string;
        creatorClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameWinner"
  ): TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [[string, string, string], [boolean, boolean, boolean]] & {
        winners: [string, string, string];
        winnersClaimed: [boolean, boolean, boolean];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContinue"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIdToGameId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCoordinator"
  ): TypedContractMethod<[_vrfCoordinator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_gameId: BigNumberish, _voteOption: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whiteList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistUpdate"
  ): TypedContractMethod<
    [_newAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimPool"
  ): TypedContractEvent<
    ClaimPoolEvent.InputTuple,
    ClaimPoolEvent.OutputTuple,
    ClaimPoolEvent.OutputObject
  >;
  getEvent(
    key: "CoordinatorSet"
  ): TypedContractEvent<
    CoordinatorSetEvent.InputTuple,
    CoordinatorSetEvent.OutputTuple,
    CoordinatorSetEvent.OutputObject
  >;
  getEvent(
    key: "NewGame"
  ): TypedContractEvent<
    NewGameEvent.InputTuple,
    NewGameEvent.OutputTuple,
    NewGameEvent.OutputObject
  >;
  getEvent(
    key: "NewVote"
  ): TypedContractEvent<
    NewVoteEvent.InputTuple,
    NewVoteEvent.OutputTuple,
    NewVoteEvent.OutputObject
  >;
  getEvent(
    key: "NewWinner"
  ): TypedContractEvent<
    NewWinnerEvent.InputTuple,
    NewWinnerEvent.OutputTuple,
    NewWinnerEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WhiteListUpdate"
  ): TypedContractEvent<
    WhiteListUpdateEvent.InputTuple,
    WhiteListUpdateEvent.OutputTuple,
    WhiteListUpdateEvent.OutputObject
  >;

  filters: {
    "ClaimPool(uint256,address,uint256,uint8)": TypedContractEvent<
      ClaimPoolEvent.InputTuple,
      ClaimPoolEvent.OutputTuple,
      ClaimPoolEvent.OutputObject
    >;
    ClaimPool: TypedContractEvent<
      ClaimPoolEvent.InputTuple,
      ClaimPoolEvent.OutputTuple,
      ClaimPoolEvent.OutputObject
    >;

    "CoordinatorSet(address)": TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;
    CoordinatorSet: TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;

    "NewGame(uint256,string,string,uint256,uint256,address)": TypedContractEvent<
      NewGameEvent.InputTuple,
      NewGameEvent.OutputTuple,
      NewGameEvent.OutputObject
    >;
    NewGame: TypedContractEvent<
      NewGameEvent.InputTuple,
      NewGameEvent.OutputTuple,
      NewGameEvent.OutputObject
    >;

    "NewVote(uint256,address,uint8,uint256)": TypedContractEvent<
      NewVoteEvent.InputTuple,
      NewVoteEvent.OutputTuple,
      NewVoteEvent.OutputObject
    >;
    NewVote: TypedContractEvent<
      NewVoteEvent.InputTuple,
      NewVoteEvent.OutputTuple,
      NewVoteEvent.OutputObject
    >;

    "NewWinner(uint256,address[3])": TypedContractEvent<
      NewWinnerEvent.InputTuple,
      NewWinnerEvent.OutputTuple,
      NewWinnerEvent.OutputObject
    >;
    NewWinner: TypedContractEvent<
      NewWinnerEvent.InputTuple,
      NewWinnerEvent.OutputTuple,
      NewWinnerEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "WhiteListUpdate(address,bool)": TypedContractEvent<
      WhiteListUpdateEvent.InputTuple,
      WhiteListUpdateEvent.OutputTuple,
      WhiteListUpdateEvent.OutputObject
    >;
    WhiteListUpdate: TypedContractEvent<
      WhiteListUpdateEvent.InputTuple,
      WhiteListUpdateEvent.OutputTuple,
      WhiteListUpdateEvent.OutputObject
    >;
  };
}
